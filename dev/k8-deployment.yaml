---
kind: Secret
apiVersion: v1
metadata:
  name: domain-tls
  namespace: [app]
data:
  tls.crt: >-
    ...
  tls.key: >-
    ...
type: kubernetes.io/tls

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-overrides-backend
  namespace: [app]
data:
  config_overrides.py: |
    DATABASE_URI = 'postgresql://postgres:...!@[app]-db-dev.....us-west-2.rds.amazonaws.com:5432/app'
    DRAMATIQ_BROKER_URL = 'redis://redis.postgres:6379/2'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: [app]
  namespace: [app]
  labels:
    app: [app]
spec:
  selector:
    matchLabels:
      app: [app]
  template:
    metadata:
      labels:
        app: [app]
    spec:
      volumes:
        - name: config-overrides
          configMap:
            name: config-overrides-backend
            defaultMode: 420
      containers:
        - name: [app]
          image: ....dkr.ecr.us-west-2.amazonaws.com/app:master
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              protocol: TCP
              name: http
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          resources: { }
          volumeMounts:
            - mountPath: /app/config_overrides.py
              subPath: config_overrides.py
              name: config-overrides
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: [app]-dramatiq
  namespace: [app]
  labels:
    app: [app]-dramatiq
spec:
  selector:
    matchLabels:
      app: [app]-dramatiq
  template:
    metadata:
      labels:
        app: [app]-dramatiq
    spec:
      volumes:
        - name: config-overrides
          configMap:
            name: config-overrides-backend
            defaultMode: 420
      containers:
        - name: [app]-dramatiq
          image: ....dkr.ecr.us-west-2.amazonaws.com/app:master
          command:
            - "python"
          args:
            - "app/manage.py"
            - "worker"
          imagePullPolicy: Always
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          resources: { }
          volumeMounts:
            - mountPath: /app/config_overrides.py
              subPath: config_overrides.py
              name: config-overrides
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler

---
apiVersion: v1
kind: Service
metadata:
  name: [app]-http
  namespace: [app]
spec:
  ports:
    - port: 80
      name: http
      protocol: TCP
      targetPort: 8080
  selector:
    app: [app]
  type: ClusterIP
  sessionAffinity: None

---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: "nginx"
  name: [app]-ingress
  namespace: [app]
spec:
  rules:
    - host: dev.[app].trexup.systems
      http:
        paths:
          - path: /
            backend:
              serviceName: [app]-http
              servicePort: 80
  tls:
    - hosts:
        - dev.[app].[domain]
      secretName: domain-tls
